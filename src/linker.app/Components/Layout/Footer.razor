
<div class="footer flex">
    <div class="left flex-1"></div>
    <div class="logo">
        <a href="/">
            @if (connected)
            {
                <img src="./logo.png" alt="logo" />
            }
            else
            {
                <img src="./logo1.png" alt="logo" />
            }
        </a>
        <div class="t-c">@version</div>
    </div>
    <div class="right flex-1">
        <div class="t-c group-wrap">
            <Dropdown>
                <Overlay>
                    <Menu>
                        @foreach (var item in groups)
                        {
                            <MenuItem>
                                <a href="javascript:;" @onclick="()=>ChangeGroup(item)">@item.Name</a>
                            </MenuItem>
                        }
                    </Menu>
                </Overlay>
                <ChildContent>
                    <a class="ant-dropdown-link" @onclick:preventDefault>
                        @group<Icon Type="@IconType.Outline.Down" />
                    </a>
                </ChildContent>
            </Dropdown>
        </div>
    </div>
</div>

@using linker.messenger.entry;
@using linker.messenger.signin;
@code {

    SignInClientState signin = LinkerMessengerEntry.GetService<SignInClientState>();
    ISignInClientStore signInStore = LinkerMessengerEntry.GetService<ISignInClientStore>();
    SignInClientTransfer signInClientTransfer = LinkerMessengerEntry.GetService<SignInClientTransfer>();
    bool connected => signin.Connected;
    string version => signin.Version;

    SignInClientGroupInfo[] groups => signInStore.Groups;
    string group => signInStore.Group.Name;

    protected override void OnInitialized()
    {
        Task.Run(async () =>
        {
            while (true)
            {
                InvokeAsync(StateHasChanged);
                await Task.Delay(1000);
            }
        });
    }
    private void ChangeGroup(SignInClientGroupInfo item)
    {
        int index = 0;
        for (int i = 0; i < groups.Length; i++)
        {
            if (groups[i].Id == item.Id)
            {
                index = i;
                break;
            }
        }

        var indexItem = signInStore.Groups[index];
        signInStore.Groups[index] = signInStore.Groups[0];
        signInStore.Groups[0] = indexItem;
        signInClientTransfer.ReSignIn();
    }
}

<style>
    .footer {
        height: 5rem;
        border-top: 1px solid #ddd;
        background-color: #f5f5f5;
        box-shadow: -1px -1px 6px rgba(0,0,0,0.05)
    }
    .group-wrap{
        padding-top:1.4rem;
    }

        .group-wrap a{color:#333;}

    .logo a {
        display: block;
        width: 6rem;
        height: 6rem;
        border: 1px solid #ddd;
        border-radius: 50%;
        box-sizing: border-box;
        padding: .6rem;
        margin-top: -3rem;
        background-color: #fff;
        box-shadow: 0 0 6px rgba(0,0,0,0.075);
    }

        .logo a img {
            width: 100%;
        }
</style>